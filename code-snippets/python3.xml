<?xml version='1.0' encoding='utf-8'?>
<snippets language="python3">
  <snippet>
    <tag>abs</tag>
    <text><![CDATA[abs(${1:x})
$0]]></text>
    <description>Absolute</description>
  </snippet>
  <snippet>
    <tag>all</tag>
    <text><![CDATA[all(${1:iterable})
$0]]></text>
    <description>All</description>
  </snippet>
  <snippet>
    <tag>any</tag>
    <text><![CDATA[any(${1:iterable})
$0]]></text>
    <description>Any</description>
  </snippet>
  <snippet>
    <tag>ascii</tag>
    <text><![CDATA[ascii(${1:obj})
$0]]></text>
    <description>ASCII</description>
  </snippet>
  <snippet>
    <tag>assert</tag>
    <text><![CDATA[assert ${1:expression}
$0]]></text>
    <description>Assert</description>
  </snippet>
  <snippet>
    <tag>author</tag>
    <text><![CDATA[__author__ = "${1:author(s)}"
__copyright__ = "${2:copyright}"
__credits__ = [${3:credits}]
__license__ = "${4:PSFL|MIT|Apache|LGPL|GPL}"
__version__ = "${5:MAJOR}.${6:Minor}.${7:patch}"
__maintainer__ = "$<return $1.split(',')[0]>"
__email__ = "${8:username}@${9:domain_name}"
__status__ = "${10:Prototype|Development|Production}"
$0]]></text>
    <description>Authorship, Versioning and Licenseing</description>
  </snippet>
  <snippet>
    <tag>bin</tag>
    <text><![CDATA[bin(${1:number})
$0]]></text>
    <description>Binary</description>
  </snippet>
  <snippet>
    <tag>bool</tag>
    <text><![CDATA[bool(${1:x})
$0]]></text>
    <description>Boolean</description>
  </snippet>
  <snippet>
    <tag>breakpoint</tag>
    <text><![CDATA[breakpoint(${1:*args}${2:, **kwargs})
$0]]></text>
    <description>Breakpoint</description>
  </snippet>
  <snippet>
    <tag>break</tag>
    <text><![CDATA[break
$0]]></text>
    <description>Break Statement</description>
  </snippet>
  <snippet>
    <tag>bytearray</tag>
    <text><![CDATA[bytearray(${1:string}${2:, encoding}${3:, errors})
$0]]></text>
    <description>Byte Array</description>
  </snippet>
  <snippet>
    <tag>bytes</tag>
    <text><![CDATA[bytes(${1:iterable_of_ints})
$0]]></text>
    <description>Bytes</description>
  </snippet>
  <snippet>
    <tag>callable</tag>
    <text><![CDATA[callable(${1:object})
$0]]></text>
    <description>Callable</description>
  </snippet>
  <snippet>
    <tag>chr</tag>
    <text><![CDATA[chr(${1:i})
$0]]></text>
    <description>Character</description>
  </snippet>
  <snippet>
    <tag>clamp</tag>
    <text><![CDATA[max(min(${1:low}, ${2:x}), ${3:high})
$0]]></text>
    <description>Clamp</description>
  </snippet>
  <snippet>
    <tag>class</tag>
    <text><![CDATA[class ${1:identifier}(${2:arguments}):
    ${3:suite}
$0]]></text>
    <description>Class Definition</description>
  </snippet>
  <snippet>
    <tag>compile</tag>
    <text><![CDATA[compile(${1:source}, ${2:filename}, ${3:mode}${4:, flags = 0}${5:, dont_inherit = False}${6:, optimize = -1})
$0]]></text>
    <description>Compile</description>
  </snippet>
  <snippet>
    <tag>complex</tag>
    <text><![CDATA[complex(${1:real}, ${2:imag})
$0]]></text>
    <description>Complex</description>
  </snippet>
  <snippet>
    <tag>continue</tag>
    <text><![CDATA[continue
$0]]></text>
    <description>Continue Statement</description>
  </snippet>
  <snippet>
    <tag>await</tag>
    <text><![CDATA[await ${1:primary}
$0]]></text>
    <description>Coroutine Awaitable</description>
  </snippet>
  <snippet>
    <tag>async</tag>
    <text><![CDATA[async ${1:function_body}$0]]></text>
    <description>Couroutine Definition</description>
  </snippet>
  <snippet>
    <tag>delattr</tag>
    <text><![CDATA[delattr(${1:obj}, ${1:name})
$0]]></text>
    <description>Delete Attribute</description>
  </snippet>
  <snippet>
    <tag>del</tag>
    <text><![CDATA[del ${1:target}
$0]]></text>
    <description>Delete Statement</description>
  </snippet>
  <snippet>
    <tag>dict</tag>
    <text><![CDATA[dict(${1:mapping})
$0]]></text>
    <description>Dictionary</description>
  </snippet>
  <snippet>
    <tag>{</tag>
    <text><![CDATA[{${1:i}: ${2:j} for ${3:i, j} in ${4:iterator}}
$0]]></text>
    <description>Dictionary Comprehension</description>
  </snippet>
  <snippet>
    <tag>dir</tag>
    <text><![CDATA[dir(${1:object})
$0]]></text>
    <description>Directory</description>
  </snippet>
  <snippet>
    <tag>divmod</tag>
    <text><![CDATA[divmod(${1:x}, ${2:y})
$0]]></text>
    <description>Division and Modulo</description>
  </snippet>
  <snippet>
    <text><![CDATA[""" ${1:Documentation String} """
$0]]></text>
    <description>doc string</description>
    <tag>doc</tag>
  </snippet>
  <snippet>
    <tag>elif</tag>
    <text><![CDATA[elif ${1:assignment_expression}:
    ${2:suite}
$0]]></text>
    <description>Else If Statement</description>
  </snippet>
  <snippet>
    <tag>enumerate</tag>
    <text><![CDATA[enumerate(${1:iterable}${2:, start=0})
$0]]></text>
    <description>Enumerate</description>
  </snippet>
  <snippet>
    <tag>eval</tag>
    <text><![CDATA[eval(${1:expression}${2:, globals=None}${3:, locals=None})
$0]]></text>
    <description>Evaluate</description>
  </snippet>
  <snippet>
    <tag>exceptas</tag>
    <text><![CDATA[except ${1:expression} as ${2:identifier}:
    ${3:suite}
$0]]></text>
    <description>Except As Statement</description>
  </snippet>
  <snippet>
    <tag>except</tag>
    <text><![CDATA[except ${1:expression}:
    ${2:suite}
$0]]></text>
    <description>Except Statement</description>
  </snippet>
  <snippet>
    <tag>exec</tag>
    <text><![CDATA[exec(${1:object}${2:, globals=None}${3:, locals=None})
$0]]></text>
    <description>Execute</description>
  </snippet>
  <snippet>
    <tag>filter</tag>
    <text><![CDATA[filter(${1:function or None}, ${2:iterable})
$0]]></text>
    <description>Filter</description>
  </snippet>
  <snippet>
    <tag>float</tag>
    <text><![CDATA[float(${1:x=0})
$0]]></text>
    <description>Float</description>
  </snippet>
  <snippet>
    <tag>forelse</tag>
    <text><![CDATA[for ${1:target} in ${2:expression}:
    ${3:suite}
else:
    ${4:suite}
$0]]></text>
    <description>For Else Statement</description>
  </snippet>
  <snippet>
    <tag>format</tag>
    <text><![CDATA[format(${1:value}${2:, format_spec=''})
$0]]></text>
    <description>Format</description>
  </snippet>
  <snippet>
    <tag>formutate</tag>
    <text><![CDATA[for ${1:target} in ${2:expression}[:]:
    ${3:suite}
$0]]></text>
    <description>For Mutate Statement</description>
  </snippet>
  <snippet>
    <tag>forrange</tag>
    <text><![CDATA[for ${1:i} in range(${2:start}, ${3:stop}${4:, step}):
    ${5:suite}
$0]]></text>
    <description>For Range Statement</description>
  </snippet>
  <snippet>
    <tag>for</tag>
    <text><![CDATA[for ${1:target} in ${2:expression}:
    ${3:suite}
$0]]></text>
    <description>For Statement</description>
  </snippet>
  <snippet>
    <tag>frozenset</tag>
    <text><![CDATA[frozenset(${1:iterable})
$0]]></text>
    <description>Frozen Set</description>
  </snippet>
  <snippet>
    <tag>def</tag>
    <text><![CDATA[def ${1:identifier}(${2:parameters})$3:
    ${4:suite}
$0]]></text>
    <description>Function Definition</description>
  </snippet>
  <snippet>
    <tag>getattr</tag>
    <text><![CDATA[getattr(${1:object}, ${2:name}${3:, default})
$0]]></text>
    <description>Get Attribute</description>
  </snippet>
  <snippet>
    <tag>globals</tag>
    <text><![CDATA[globals()
$0]]></text>
    <description>Globals</description>
  </snippet>
  <snippet>
    <tag>global</tag>
    <text><![CDATA[global ${1:identifier}
$0]]></text>
    <description>Global Statement</description>
  </snippet>
  <snippet>
    <tag>hasattr</tag>
    <text><![CDATA[hasattr(${1:obj}, ${2:name})
$0]]></text>
    <description>Has Attribute</description>
  </snippet>
  <snippet>
    <tag>hash</tag>
    <text><![CDATA[hash(${1:obj}})
$0]]></text>
    <description>Hash</description>
  </snippet>
  <snippet>
    <tag>help</tag>
    <text><![CDATA[help(${1:thing})
$0]]></text>
    <description>Help</description>
  </snippet>
  <snippet>
    <tag>hex</tag>
    <text><![CDATA[hex(${1:number})
$0]]></text>
    <description>Hexidecimal</description>
  </snippet>
  <snippet>
    <tag>id</tag>
    <text><![CDATA[id(${1:obj})
$0]]></text>
    <description>Identity</description>
  </snippet>
  <snippet>
    <tag>ifelse</tag>
    <text><![CDATA[if ${1:assignment_expression}:
    ${2:suite}
${3:elif}
else:
    ${1:suite}
$0]]></text>
    <description>If Else Statement</description>
  </snippet>
  <snippet>
    <tag>if</tag>
    <text><![CDATA[if ${1:assignment_expression}:
    ${2:suite}
${3:elif}$0]]></text>
    <description>If Statement</description>
  </snippet>
  <snippet>
    <tag>importas</tag>
    <text><![CDATA[import ${1:module} as ${2:identifier}
$0]]></text>
    <description>Import As Statement</description>
  </snippet>
  <snippet>
    <tag>import</tag>
    <text><![CDATA[import ${1:module}
$0]]></text>
    <description>Import Statement</description>
  </snippet>
  <snippet>
    <text><![CDATA[if __name__ == "__main__":
    ${1:suite}
$0]]></text>
    <description>In Main</description>
    <tag>inmain</tag>
  </snippet>
  <snippet>
    <tag>input</tag>
    <text><![CDATA[input(${1:prompt=None})
$0]]></text>
    <description>Input</description>
  </snippet>
  <snippet>
    <text><![CDATA[$<1:return set($GEDIT_SELECTED_TEXT)>$0]]></text>
    <description>Insert Immutable Sequence {...}</description>
    <accelerator><![CDATA[<Primary><Shift>braceleft]]></accelerator>
  </snippet>
  <snippet>
    <text><![CDATA[$<1:return list($GEDIT_SELECTED_TEXT)>$0]]></text>
    <description>Insert Mutable Sequence: Insert [...]</description>
    <accelerator><![CDATA[<Primary>bracketleft]]></accelerator>
  </snippet>
  <snippet>
    <text><![CDATA["${1:$GEDIT_SELECTED_TEXT}"$0]]></text>
    <accelerator><![CDATA[<Primary>2]]></accelerator>
    <description>Inside String: Insert "â€¦"</description>
  </snippet>
  <snippet>
    <tag>int</tag>
    <text><![CDATA[int(${1:x}${2:, base=10})
$0]]></text>
    <description>Integer</description>
  </snippet>
  <snippet>
    <tag>isinstance</tag>
    <text><![CDATA[isinstance(${1:obj}, ${2:class_or_tuple})
$0]]></text>
    <description>Is Instance</description>
  </snippet>
  <snippet>
    <tag>issubclass</tag>
    <text><![CDATA[issubclass(${1:cls}, ${2:class_or_tuple})
$0]]></text>
    <description>Is Sub Class</description>
  </snippet>
  <snippet>
    <tag>iter</tag>
    <text><![CDATA[iter(${1:iterable})
$0]]></text>
    <description>Iterator</description>
  </snippet>
  <snippet>
    <tag>(</tag>
    <text><![CDATA[(${1:i} for ${2:i} in ${3:iterator})
$0]]></text>
    <description>Iterator Comprehension</description>
  </snippet>
  <snippet>
    <tag>lambda</tag>
    <text><![CDATA[lambda ${1:parameters}: ${1}
$0]]></text>
    <description>Lambda</description>
  </snippet>
  <snippet>
    <tag>len</tag>
    <text><![CDATA[len(${1:obj})
$0]]></text>
    <description>Length</description>
  </snippet>
  <snippet>
    <tag>list</tag>
    <text><![CDATA[list(${1:iterable=(),})
$0]]></text>
    <description>List</description>
  </snippet>
  <snippet>
    <tag>[</tag>
    <text><![CDATA[[${1:i} for ${2:i} in ${3:iterator}]
$0]]></text>
    <description>List Comprehension</description>
  </snippet>
  <snippet>
    <tag>locals</tag>
    <text><![CDATA[locals()
$0]]></text>
    <description>Locals</description>
  </snippet>
  <snippet>
    <tag>map</tag>
    <text><![CDATA[map(${1:func}, ${2:*iterables})
$0]]></text>
    <description>Map</description>
  </snippet>
  <snippet>
    <tag>max</tag>
    <text><![CDATA[max(${1:iterable}${2:, default=obj}${3:, key=func}])
$0]]></text>
    <description>Max</description>
  </snippet>
  <snippet>
    <tag>memoryview</tag>
    <text><![CDATA[memoryview(${1:object})
$0]]></text>
    <description>Memory View</description>
  </snippet>
  <snippet>
    <tag>min</tag>
    <text><![CDATA[min(${1:iterable}${2:, default=obj}${3:, key=func}])
$0]]></text>
    <description>Min</description>
  </snippet>
  <snippet>
    <tag>next</tag>
    <text><![CDATA[next(${1:iterator}${2:, default}])
$0]]></text>
    <description>Next</description>
  </snippet>
  <snippet>
    <tag>nonlocal</tag>
    <text><![CDATA[nonlocal ${1:identifier}
$0]]></text>
    <description>Nonlocal Statement</description>
  </snippet>
  <snippet>
    <tag>oct</tag>
    <text><![CDATA[oct(${1:number})
$0]]></text>
    <description>Octal</description>
  </snippet>
  <snippet>
    <tag>open</tag>
    <text><![CDATA[open(${1:file}${2:, mode='r'}${3:, buffering=-1}${4:, encoding=None}${5:, errors=None}${6:, newline=None}${7:, closefd=True}${8:, opener=None})
$0]]></text>
    <description>Open</description>
  </snippet>
  <snippet>
    <tag>ord</tag>
    <text><![CDATA[ord(${1:ord})
$0]]></text>
    <description>Ordinal</description>
  </snippet>
  <snippet>
    <tag>pass</tag>
    <text><![CDATA[pass
$0]]></text>
    <description>Pass Statement</description>
  </snippet>
  <snippet>
    <tag>pow</tag>
    <text><![CDATA[pow(${1:x}, ${2:y}${3:, z=one})
$0]]></text>
    <description>Power</description>
  </snippet>
  <snippet>
    <tag>print</tag>
    <text><![CDATA[print(${1:value}${2:, sep=' '}${3:, end='\n'}${4:, file=sys.stdout}${5:, flush=False})
$0]]></text>
    <description>Print</description>
  </snippet>
  <snippet>
    <tag>property</tag>
    <text><![CDATA[property(${1:object})
$0]]></text>
    <description>Property</description>
  </snippet>
  <snippet>
    <tag>raisefrom</tag>
    <text><![CDATA[raraise ${1:expression} from ${2:expression}
$0]]></text>
    <description>Raise From Statement</description>
  </snippet>
  <snippet>
    <tag>raise</tag>
    <text><![CDATA[raise ${1:expression}
$0]]></text>
    <description>Raise Statement</description>
  </snippet>
  <snippet>
    <tag>range</tag>
    <text><![CDATA[range(${1:start}, ${2:stop}${3:, step})
$0]]></text>
    <description>Range</description>
  </snippet>
  <snippet>
    <tag>repr</tag>
    <text><![CDATA[repr(${1:obj})
$0]]></text>
    <description>Representation</description>
  </snippet>
  <snippet>
    <tag>return</tag>
    <text><![CDATA[return ${1:expression_list}
$0]]></text>
    <description>Return Statement</description>
  </snippet>
  <snippet>
    <tag>reversed</tag>
    <text><![CDATA[reversed(${1:sequence})
$0]]></text>
    <description>Reversed</description>
  </snippet>
  <snippet>
    <tag>round</tag>
    <text><![CDATA[round(${1:number}${2:, ndigits=None})
$0]]></text>
    <description>Round</description>
  </snippet>
  <snippet>
    <tag>setattr</tag>
    <text><![CDATA[setattr(${1:obj}, ${2:name}, ${3:value})
$0]]></text>
    <description>Set Attribute</description>
  </snippet>
  <snippet>
    <tag>set</tag>
    <text><![CDATA[set(${1:iterable})
$0]]></text>
    <description>Set</description>
  </snippet>
  <snippet>
    <tag>slice</tag>
    <text><![CDATA[slice(${1:start}, ${2:stop}${3:, step})
$0]]></text>
    <description>Slice</description>
  </snippet>
  <snippet>
    <tag>sorted</tag>
    <text><![CDATA[sorted(${1:iterable}${2:, key=None}${3:, reverse=False})
$0]]></text>
    <description>Sorted</description>
  </snippet>
  <snippet>
    <tag>str</tag>
    <text><![CDATA[str(${1:bytes_or_buffer}${2:, encoding}${3:, errors})
$0]]></text>
    <description>String</description>
  </snippet>
  <snippet>
    <tag>sum</tag>
    <text><![CDATA[sum(${1:iterable},${2:, start=0})
$0]]></text>
    <description>Sumation</description>
  </snippet>
  <snippet>
    <tag>super</tag>
    <text><![CDATA[super(${1:type})
$0]]></text>
    <description>Super</description>
  </snippet>
  <snippet>
    <tag>tryelse</tag>
    <text><![CDATA[try:
    ${1:suite}
$2else:
    ${3:suite}
$0]]></text>
    <description>Try Else Statement</description>
  </snippet>
  <snippet>
    <tag>tryfinally</tag>
    <text><![CDATA[try:
    ${1:suite}
$2finally:
    ${3:suite}
$0]]></text>
    <description>Try Finally Statement</description>
  </snippet>
  <snippet>
    <tag>try</tag>
    <text><![CDATA[try:
    ${1:suite}
$0]]></text>
    <description>Try Statement</description>
  </snippet>
  <snippet>
    <tag>tuple</tag>
    <text><![CDATA[tuple(${1:iterable=()})
$0]]></text>
    <description>Tuple</description>
  </snippet>
  <snippet>
    <tag>type</tag>
    <text><![CDATA[type(${1:object_or_name}, ${2:bases}, ${3:dict})
$0]]></text>
    <description>Type</description>
  </snippet>
  <snippet>
    <tag>vars</tag>
    <text><![CDATA[vars(${1:object})
$0]]></text>
    <description>Variables</description>
  </snippet>
  <snippet>
    <tag>whileelse</tag>
    <text><![CDATA[while ${1:assinment_expression}:
    ${2:suite}
else:
    ${3:suite}
$0
]]></text>
    <description>While Else Statement</description>
  </snippet>
  <snippet>
    <tag>while</tag>
    <text><![CDATA[while ${1:assinment_expression}:
    ${2:suite}
$0
]]></text>
    <description>While Statement</description>
  </snippet>
  <snippet>
    <tag>withas</tag>
    <text><![CDATA[with ${1:expression} as ${2:identfier}:
    ${3:suite}
$0]]></text>
    <description>With As Statement</description>
  </snippet>
  <snippet>
    <tag>with</tag>
    <text><![CDATA[with ${1:expression}:
    ${2:suite}
$0]]></text>
    <description>With Statement</description>
  </snippet>
  <snippet>
    <tag>yieldfrom</tag>
    <text><![CDATA[yield from ${1:expression}
$0]]></text>
    <description>Yield From Expression</description>
  </snippet>
  <snippet>
    <tag>yield</tag>
    <text><![CDATA[yield ${1:expression_list}
$0]]></text>
    <description>Yield Statement</description>
  </snippet>
  <snippet>
    <tag>zip</tag>
    <text><![CDATA[zip(${1:iter}${2:, iter})
$0]]></text>
    <description>Zip</description>
  </snippet>
</snippets>
